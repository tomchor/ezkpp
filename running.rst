Running KPP
===========

The first test case
-------------------

We now follow the manual and begin running the Chapman stratospheric mechanism
as a test case. This will allow us to illustrate some key feature when running
KPP.

In order to run, our example needs three things:

- a ``.kpp`` file (from the KPP directory, type ``ls examples`` to see some examples of those)
- a ``.spc`` file (type ``ls models`` to see some examples of those)
- a ``.eqn`` file (type ``ls models`` to see some examples of those)

We begin by creating a directory to run this first test. Let's call this
directory ``test1`` and create it with ``mkdir test1``. We go to that directory
with ``cd test1``. Let's follow the manual and create a file called ``small_strato.kpp``
with the following contents:

.. code-block:: fortran

 #MODEL      small_strato
 #LANGUAGE   Fortran90
 #DOUBLE     ON
 #INTEGRATOR rosenbrock
 #DRIVER     general
 #JACOBIAN   SPARSE_LU_ROW
 #HESSIAN    ON
 #STOICMAT   ON

You can do this by typing ``nano small_strato.kpp`` in the ``test1`` directory, if
using Nano, or by using another editor of your choice. Then just paste the
content above in the file, save it and exit it.

This file tells KPP what model to use and how to process it. You can learn more
about this in the KPP manual, but basically our file is telling KPP to use the
``small_strato`` model, output the code in Fortran 90 with double precision
using the Rosenbrock integrator.

If our changes to ``.bashrc`` are correct, then KPP should be able to find the
correct model, since the ``small_strato`` model is located in the ``models``
directory, in the KPP home directory. We test this by running KPP on our
recently created file with ``kpp small_strato.kpp``.

You should see a line saying ``KPP has succesfully created the model
"small_strato"``, which means you were sucessfull. Now if you type ``ls``,
you'll see many new files:

.. code::

 Makefile_small_strato           small_strato.map
 small_strato_Function.f90       small_strato_mex_Fun.f90
 small_strato_Global.f90         small_strato_mex_Hessian.f90
 small_strato_Hessian.f90        small_strato_mex_Jac_SP.f90
 small_strato_HessianSP.f90      small_strato_Model.f90
 small_strato_Initialize.f90     small_strato_Monitor.f90
 small_strato_Integrator.f90     small_strato_Parameters.f90
 small_strato_Jacobian.f90       small_strato_Precision.f90
 small_strato_JacobianSP.f90     small_strato_Rates.f90
 small_strato.kpp                small_strato_Stoichiom.f90
 small_strato_LinearAlgebra.f90  small_strato_StoichiomSP.f90
 small_strato_Main.f90           small_strato_Util.f90

These are going to be used to compile the code generated by KPP. Let's focus
for now on the ``Makefile_small_strato``. This tells which Fortran compiler to
use and etc. 
Open the ``Makefile_small_strato`` file and find where it says

.. code-block:: bash

 #COMPILER = G95
 #COMPILER = LAHEY
 COMPILER = INTEL
 #COMPILER = PGF
 #COMPILER = HPUX
 #COMPILER = GFORTRAN

This tells the computer to use the intel Fortran compiler, ``ifort``. If you
are using ``ifort``, you should leave it as it is. If you are using another
compiler, put the ``#`` in front of the ``INTEL`` and take it out of the line
which has the name of your compiler. If you don't know which compiler you have,
chances are you have gfortran, which is what we will use here. So, assuming
gfortran, make it read

.. code-block:: bash

 #COMPILER = G95
 #COMPILER = LAHEY
 #COMPILER = INTEL
 #COMPILER = PGF
 #COMPILER = HPUX
 COMPILER = GFORTRAN

Save and exit the file.

Now all you have to do is run ``make -fMakefile_small_strato``, which will
compile your fortran code into an executable. Now you'll see many more new
files, including one called ``small_strato.exe``, which is your executable
file. To test, run ``./small_strato.exe``, which will run the executable.
You should see some output on the screen with concentrations, telling you that
your run was successfull and that everything worked well!


Understanding and improving on the test case
--------------------------------------------
